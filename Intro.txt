


--> JS - recap

--> How Browser executes .js programs

-------------------------------------------------------------


day-1- : Level-1  : Node.js
day-2- : Level-2  : Advanved Node.js
day-3- : Node.js Web F.Ws  --> Express.js , ( loopback intro)


------------------------------------------------------------


 .js-lang


    ref : http://crockford.com/


    --> scripting lang for web-pages in browser-envi
    +
    --> server-side lang on Node.js

    --> command-line tools

    --> Mobile Appln

    ----------------------------------------------------------

    .js-lang features

    1. flexiblity

        --> functional-programming ( for Event-Driven appln )
        --> OOP lang
        --> data-types are dynamic

    2. supports closures

    3. Single-Threaded lang, can implement better concurrency
    4. supports Non-Blocking  IO

    ----------------------------------------------------------


    .js-lang is based on 'ECMAScript spec'

     latest:

     ECMAScript-2015 or ES6

   -----------------------------------------------------------


   How to run .js programs?

    ==> using 'JS-runtime'  


    browser-envi ( by default provides js-runtime )

    a. chrome  --> v8(c++)
    b. firefox --> rhino(java)
    c. IE/Edge --> chakra
    d. safari  --> nitro


    other-envi

    a. Node.js --> v8
    b. JVM     --> rhino | nashorn ( from java-8)
    c. Apache CouchDB
    d. Adobe
    e. MongoDB

    --------------------------------------------------------


    .js-learn path

        1. data-types
        2. execution contexts ( scope chains )
        3. functions - depth
        4. 'this' keyword . ( Owner execution context )
        5. closures ( what , why )
        6. Inheritance ( using prototypes )
        7. Objects-depth
        8. ES6 - New-Features
        9. JS-best practices
        10. JS functional utility libraries ( e.g Underscore.js or Lodash)


        learning ref : http://exploringjs.com/
                     : https://developer.mozilla.org/en-US/docs/Web/JavaScript

        then 
        
            --> learn How to use .js-lang on browser-APIs or Node.js  APIs      

     ----------------------------------------------------------------------------


     --> .js-lang is single-thread lang , we can implement concurrency
     --> all IO operations are Non-Blocking


      How .js-programs running in browser ?


      browser-envi . e.g chrome
      ---------------------------


        a. JS-engine ( v8 )

            a. single-call-stack ==> to execute contexts
            b. heap       ==> to keep object's data


        b. Web APIs ( e.g DOM, XHR,Timer,HTML5 APIs  ) are bsaed w3c standards

        c. Event/Message/Callback Queue

        d. Event-Loop 


        ref : https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
        
        js-runtime simulator : http://latentflip.com/loupe/



     -------------------------------------------------------------------------------


     CALL-STACK
     -------------

      #1

        function foo(b) {
            var a = 10;
            return a + b + 11;
        }

        function bar(x) {
            var y = 3;
            return foo(x * y);
        }

        console.log(bar(7));

    //-------------------------------------------------------------------

    #2

        function foo(){

        }

        function bar(){
            foo()
        }
        function baz(){
            bar();
        }
        baz();

    //-------------------------------------------------------------------

    #3

        function foo(){
            throw new Error('oops');
        }

        function bar(){
            foo()
        }
        function baz(){
            bar();
        }
        baz();    

    //-------------------------------------------------------------------

     #4

       function foo(){
           foo();
       }   
       foo();


     //-------------------------------------------------------------------

     #6

      function longRunning(){
        var i=0;
        while(i<5){
            console.log('hello....');
            i++;
        }
      }

      function shortRunning(){
          console.log('quick...');
      }

      longRunning();
      shortRunning()

    //------------------------------------------------------------------------


    html:

     <button class="odd"> Button-1 </button>
     <button class="even"> Button-2 </button>

    js-code:

     console.log('start');

     $.on('.odd','click',function handler1(event){
         console.log('Handling click-event on .odd elements');
     });
     $.on('.even','click',function handler2(event){
         console.log('Handling click-event on .even elements');
     });

     console.log('continue with other work...');
      
     function longRunning(){
        var i=0;
        while(i<50){
            console.log('hello....');
            i++;
        }
      }
      longRunning();
